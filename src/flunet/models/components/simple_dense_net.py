from torch import nn


class SimpleDenseNet(nn.Module):
    """A simple dense neural network module.

    This module consists of multiple fully connected layers with batch normalization and ReLU activation functions.
    It takes an input tensor and performs a forward pass through the network to generate the output.

    Args:
        input_size (int): The size of the input tensor. Defaults to 784.
        lin1_size (int): The size of the first linear layer. Defaults to 256.
        lin2_size (int): The size of the second linear layer. Defaults to 256.
        lin3_size (int): The size of the third linear layer. Defaults to 256.
        output_size (int): The size of the output tensor. Defaults to 10.
    """

    def __init__(
        self,
        input_size: int = 784,
        lin1_size: int = 256,
        lin2_size: int = 256,
        lin3_size: int = 256,
        output_size: int = 10,
    ):
        super().__init__()

        self.model = nn.Sequential(
            nn.Linear(input_size, lin1_size),
            nn.BatchNorm1d(lin1_size),
            nn.ReLU(),
            nn.Linear(lin1_size, lin2_size),
            nn.BatchNorm1d(lin2_size),
            nn.ReLU(),
            nn.Linear(lin2_size, lin3_size),
            nn.BatchNorm1d(lin3_size),
            nn.ReLU(),
            nn.Linear(lin3_size, output_size),
        )

    def forward(self, x):
        """Performs a forward pass through the SimpleDenseNet.

        Args:
            x (torch.Tensor): The input tensor.

        Returns:
            torch.Tensor: The output tensor generated by the network.
        """
        batch_size, channels, width, height = x.size()

        # (batch, 1, width, height) -> (batch, 1*width*height)
        x = x.view(batch_size, -1)

        return self.model(x)


if __name__ == "__main__":
    _ = SimpleDenseNet()
