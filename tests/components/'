from unittest.mock import Mock
import pytest
import torch
from torch_geometric.data import Data
from src.flunet.models.components.edge_processor import EdgeProcessor

class MockMLP(Mock):

    def __init__(self, in_features, out_features, hidden_dim, hidden_layers, norm_type):
        super().__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.hidden_dim = hidden_dim
        self.hidden_layers = hidden_layers
        self.norm_type = norm_type


    def forward(self, x):
        return x

def test_edgeprocessor_initialization():
    edgeprocessor = EdgeProcessor(in_dim_node=10, in_dim_edge=20, hidden_dim=15, hidden_layers=2, norm_type='BatchNorm1d')
    assert isinstance(edgeprocessor, EdgeProcessor)

def test_edgeprocessor_forward(monkeypatch):
    # create a mock MLP object
    mock_mlp = MockMLP()

    # Specify the return value of the forward method
    mock_mlp.forward.return_value = torch.randn(50, 20)

    # Use monkeypatch to replace the MLP class in the EdgeProcessor module with the mock object
    monkeypatch.setattr('src.flunet.models.components.edge_processor.MLP', mock_mlp)

    edgeprocessor = EdgeProcessor(in_dim_node=10, in_dim_edge=20, hidden_dim=15, hidden_layers=2, norm_type='BatchNorm1d')
    src = torch.randn(50, 10)
    dest = torch.randn(50, 10)
    edge_attr = torch.randn(50, 20)
    u = None
    batch = None
    output = edgeprocessor(src, dest, edge_attr, u, batch)
    assert output.size() == (50, 20)

def test_edgeprocessor_forward_with_invalid_input():
    edgeprocessor = EdgeProcessor(in_dim_node=10, in_dim_edge=20, hidden_dim=15, hidden_layers=2, norm_type='BatchNorm1d')
    src = torch.randn(50, 5)
    dest = torch.randn(50, 5)
    edge_attr = torch.randn(50, 10)
    u = None
    batch = None
    with pytest.raises(RuntimeError):
        output = edgeprocessor(src, dest, edge_attr, u, batch)
